{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","username","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","console","log","filterTheBots","robot","toLowerCase","includes","filteredBots","filter","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNAiBeA,EAfF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,SAAUC,EAAM,EAANA,GAE7B,OAEE,yBAAKC,UAAU,oDACb,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAA1B,cACnB,6BACE,4BAAKF,GACL,2BAAIC,MCeGK,EAtBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAGlB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OAAQ,kBAAC,EAAD,CACAC,IAAKJ,EAAOG,GAAGR,GACfA,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,SAAUM,EAAOG,GAAGT,gBCCvBW,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKV,UAAU,OACf,2BACAA,UAAU,wBACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCGCI,EATA,SAACC,GACd,OACE,yBAAKC,MAAQ,CAAEC,UAAW,SAAUC,OAAQ,UACzCH,EAAMI,WCgBEC,E,YAnBb,WAAYL,GAAO,IAAD,8BAChB,4CAAMA,KACDM,MAAQ,CACXC,UAAU,GAHI,E,+EAOAC,EAAOC,GACtBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAG3B,OAA2B,IAAxBG,KAAKJ,MAAMC,SACL,+DAEFG,KAAKV,MAAMI,a,GAfMQ,aCFfvB,EAAS,CACpB,CACEL,GAAI,EACJF,KAAM,SACNC,SAAU,WAEZ,CACEC,GAAI,EACJF,KAAM,UACNC,SAAU,aAEZ,CACEC,GAAI,EACJF,KAAM,SACNC,SAAU,YAEZ,CACEC,GAAI,EACJF,KAAM,YACNC,SAAU,aAEZ,CACEC,GAAI,EACJF,KAAM,aACNC,SAAU,eAEZ,CACEC,GAAI,EACJF,KAAM,QACNC,SAAU,eAEZ,CACEC,GAAI,EACJF,KAAM,YACNC,SAAU,WAEZ,CACEC,GAAI,EACJF,KAAM,QACNC,SAAU,sBAEZ,CACEC,GAAI,EACJF,KAAM,UACNC,SAAU,eAEZ,CACEC,GAAI,GACJF,KAAM,cACNC,SAAU,aCSC8B,E,YAhDb,aAAc,IAAD,8BACX,+CAeFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,QAEzCC,QAAQC,IAAIL,EAAME,OAAOC,QAnBd,EAuBbG,cAAgB,SAACC,GAChB,SAASA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKlB,MAAMU,eAAgBM,EAAMvC,SAASwC,cAAcC,SAAS,EAAKlB,MAAMU,eAtBtH,EAAKV,MAAM,CACTjB,OAAQ,GACR2B,YAAa,IAJJ,E,iFAYXN,KAAKC,SAAS,CACZtB,OAAQA,M,+BAaH,IAAD,OACAoC,EAAef,KAAKJ,MAAMjB,OAAOqC,QAAO,SAACJ,GAC7C,OAAO,EAAKD,cAAcC,MAE5B,OAAiC,IAA7BZ,KAAKJ,MAAMjB,OAAOsC,OACb,uCAGP,yBAAK1C,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWU,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KAAe,kBAAC,EAAD,CAAUzB,OAAQoC,W,GAvCzBG,IAAMhB,WCGJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3b92502b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, username, id})=>{\n\n  return(\n\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robo' src={`https://robohash.org/${id}?200x200`}/>\n      <div>\n        <h2>{name}</h2>\n        <p>{username}</p>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) =>{\n\n\n  return(\n    <div>\n      {\n        robots.map((user, i)=>{\n          return (<Card\n                  key={robots[i].id}\n                  id={robots[i].id}\n                  name={robots[i].name}\n                  username={robots[i].username}\n                />\n          );\n      })\n      }\n\n\n    </div>\n  )\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return(\n    <div className='pa2'>\n    <input\n    className='bg--green pa3 b--blue'\n    type='search'\n    placeholder='search robots'\n    onChange={searchChange}\n    />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\n\nconst Scroll = (props) => {\n  return (\n    <div style ={{ overflowY: 'scroll', height: '600px' }}>\n      {props.children}\n    </div>\n  )\n};\n\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      hasError: false,\n    }\n  }\n\n  componentDidCatch(error, info){ //Try-catch for React\n     this.setState({ hasError: true });\n  }\n  render(){\n    if(this.state.hasError === true){\n      return <h1>Oops. Sorry there was an error!</h1>\n    }\n    return this.props.children\n  }\n}\n\n\nexport default ErrorBoundary\n","export const robots = [\n  {\n    id: 1,\n    name: 'Clinky',\n    username: 'clanker'\n  },\n  {\n    id: 2,\n    name: 'Ratchet',\n    username: 'screwhead'\n  },\n  {\n    id: 3,\n    name: 'Chromm',\n    username: 'shineMan'\n  },\n  {\n    id: 4,\n    name: 'Blitzplug',\n    username: 'lightn1ng'\n  },\n  {\n    id: 5,\n    name: 'Marky Mark',\n    username: 'shin3ybunch'\n  },\n  {\n    id: 6,\n    name: 'Morse',\n    username: 'cipherRifle'\n  },\n  {\n    id: 7,\n    name: 'Mech Claw',\n    username: 'grabIt!'\n  },\n  {\n    id: 8,\n    name: 'Giles',\n    username: 'skrrskrrvroomvroom'\n  },\n  {\n    id: 9,\n    name: 'CSwagio',\n    username: 'swagonWagon'\n  },\n  {\n    id: 10,\n    name: 'Graph Craft',\n    username: 'javaLava'\n  },\n]\n","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { robots } from '../robots';\n\n\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount(){\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(response =>response.json())\n    //   .then(users => this.setState({robots: users}));\n    this.setState({\n      robots: robots,\n    });\n  }\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value});\n\n    console.log(event.target.value);\n    //console.log(filteredBots)\n  }\n\n  filterTheBots = (robot) => { //Filter returns based on username OR name (Mark's idea)\n   return ((robot.name.toLowerCase().includes(this.state.searchfield) || robot.username.toLowerCase().includes(this.state.searchfield)) ? true : false);\n  }\n  render(){\n    const filteredBots = this.state.robots.filter((robot) => {\n      return this.filterTheBots(robot);\n    });\n    if (this.state.robots.length === 0){\n      return <h1>Loading</h1>\n    }else {\n    return(\n      <div className='tc'>\n        <h1>RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary><CardList robots={filteredBots}/></ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import { robots } from './robots';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}